plugins {
    id 'com.android.application'
}

def getVersionTag = { variant ->
    def stdout
    try {
        stdout = new ByteArrayOutputStream()
        exec {
            commandLine "git", "describe", "--match", "${variant}/*", "--tags"
            standardOutput = stdout
        }
        def longTag = stdout.toString().trim()

        return longTag.substring(longTag.indexOf('/') + 1, longTag.indexOf('-'))
    } catch (exception) {
        return "0.0.0";
    }
}

def getVersionCode = { tag ->
    def parts = tag.tokenize('.')
    if(parts.size() != 3 || parts[1].length() > 2 || parts[2].length() > 2) {
        throw new RuntimeException("Invalid version tag \"${tag}\", format \"x.y.z\" expected.")
    }
    if(parts[1].length() == 1) {
        parts[1] = "0" + parts[1]
    }
    if(parts[2].length() == 1) {
        parts[2] = "0" + parts[2]
    }
    return Integer.parseInt(parts[0] + parts[1] + parts[2])
}

def getVersionName = { tag ->
    return tag
}

android {
    namespace 'jp.co.omronsoft.openwnn'
    compileSdk 29

    defaultConfig {
        applicationId "jp.co.omronsoft.openwnn"
        minSdk 21
        //noinspection ExpiredTargetSdkVersion
        targetSdk 24
        versionCode 10000
        versionName "1.0.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                abiFilters "armeabi-v7a" , "arm64-v8a", "x86_64"
            }
        }
        ndk {
            abiFilters "armeabi-v7a" , "arm64-v8a", "x86_64"
        }
        archivesBaseName = "ime_japaneses"
    }
    signingConfigs {
        sign_aosp {
            keyAlias 'aosp'
            keyPassword 'ubiqconn'
            storeFile file('../signkey/aosp_platform.jks')
            storePassword 'ubiqconn'
        }
        sign_nxp_evk {
            keyAlias 'nxp_evk'
            keyPassword 'ubiqconn'
            storeFile file('../signkey/nxp_evk.jks')
            storePassword 'ubiqconn'
        }
        sign_ubiqconn {
            keyAlias 'ubiqconn'
            keyPassword 'ubiqconn'
            storeFile file('../signkey/ubiqconn_platform.jks')
            storePassword 'ubiqconn'
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.sign_nxp_evk
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

        }
        release {
            minifyEnabled false
            signingConfig signingConfigs.sign_nxp_evk
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            ndk {
                abiFilters "armeabi-v7a" , "arm64-v8a"
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
//    externalNativeBuild {
//        cmake {
//            path file('src/main/cpp/CMakeLists.txt')
//            version '3.18.1'
//        }
//    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def versionTag = getVersionTag('release')
            def myVersionCode = getVersionCode(versionTag)
            def myVersionName = getVersionName(versionTag)

            println variant.name + "[" + myVersionCode + ", " + myVersionName + "]"

            if (versionTag.equalsIgnoreCase("0.0.0")) {
                output.versionNameOverride = defaultConfig.versionName
                output.versionCodeOverride = defaultConfig.versionCode
            } else {
                output.versionNameOverride = myVersionName
                output.versionCodeOverride = myVersionCode
            }

            outputFileName = "${archivesBaseName}-${variant.name}-${defaultConfig.versionName}.apk"
        }
    }
}

dependencies {
//    implementation 'androidx.appcompat:appcompat:1.6.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

// Define a custom task to copy the APK
task copyApk(type: Copy) {
    def apkDir = file("${project.buildDir}/outputs/apk/release")
    from apkDir
    include 'ime_japaneses-release-1.0.apk' // Replace with the actual APK filename if needed
    into project.rootDir
}

task delApk(type: Delete) {
    def apkFile = file("${project.rootDir}/ime_japaneses-release-1.0.apk") // Replace with the actual APK filename if needed
    delete apkFile
}
// Make the copyApk task depend on the assembleRelease task
tasks.getByName("assemble").dependsOn(copyApk)
tasks.getByName("clean").dependsOn(delApk)